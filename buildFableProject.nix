{
  stdenvNoCC,
  lib,
  symlinkJoin,
  cacert,
  makeWrapper,
  dotnetCorePackages,
  mkNugetDeps,
  mkNugetSource,
  buildDotnetModule,
  fable ? {},
}: {
  name ? "${args.pname}-${args.version}",
  pname ? name,
  fablePackage ? fable,
  projectFile ? null,
  nugetDeps ? null,
  buildType ? "Release",
  language ? "JavaScript",
  dotnet-sdk ? dotnetCorePackages.sdk_6_0,
  dotnet-runtime ? dotnetCorePackages.runtime_6_0,
  ...
} @ args:
with builtins; let
  arrayToShell = a:
    if (isString a)
    then a
    else toString (map (lib.escape (lib.stringToCharacters "\\ ';$`()|<>\t")) a);


  _nugetDeps =
    if (nugetDeps != null) then
      if lib.isDerivation nugetDeps
      then nugetDeps
      else mkNugetDeps { inherit name; nugetDeps = import nugetDeps; }
    else throw "Defining the `nugetDeps` attribute is required, as to lock the NuGet dependencies. This file can be generated by running the `passthru.fetch-deps` script.";

  dependenciesSource = mkNugetSource {
    name = "${name}-dependencies-source";
    description = "A Nuget source with the dependencies for ${name}";
    deps = [ _nugetDeps ];
  };

  nugetSource = mkNugetSource {
    name = "${name}-nugetPackages-source";
    deps = [nugetPackages];
  };

  sdkDeps = lib.lists.flatten [ dotnet-sdk.packages ];

  sdkSource = let
    version = dotnet-sdk.version or (lib.concatStringsSep "-" dotnet-sdk.versions);
  in mkNugetSource {
    name = "dotnet-sdk-${version}-source";
    deps = sdkDeps;
  };

  depsWithRuntime = symlinkJoin {
    name = "${name}-nuget-source";
    paths = [dependenciesSource sdkSource];
  };

  package = stdenvNoCC.mkDerivation (args
    // {
      inherit name;
      passthru.fetch-deps =
        (buildDotnetModule {
          pname = name;
          src = args.src;
          version = args.version;
        })
        .passthru
        .fetch-deps;
      # inherit version;

      nativeBuildInputs = [cacert dotnet-sdk makeWrapper];

      configurePhase = ''
        runHook preConfigure


        dotnetRestore() {
          local -r project="''${1-}"
          dotnet restore ''${project} \
            -p:ContinuousIntegrationBuild=true \
            -p:Deterministic=true \
            --source "${depsWithRuntime}/lib"
        }

        (( "''${#projectFile[@]}" == 0 )) && dotnetRestore

    # Generate a NuGet.config file to make sure everything,
    # including things like <Sdk /> dependencies, is restored from the proper source
cat <<EOF > "./NuGet.config"
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <packageSources>
    <clear />
    <add key="nugetSource" value="@nugetSource@/lib" />
  </packageSources>
</configuration>
EOF

        for project in ${arrayToShell projectFile}; do
            dotnetRestore "$project"
        done

        runHook postConfigure
      '';

      dontStrip = true;
      dontInstall = true;
      dontWrapGApps = true;

      buildPhase = ''
        runHook preBuild

        dotnetBuild() {
          local -r project="''${1-}"
          ${fablePackage}/bin/fable --configuration ${buildType} --noRestore --optimize --lang "${language}" ''${project} -o "$out/lib/${pname}"
        }

        (( "''${#projectFile[@]}" == 0 )) && dotnetBuild

        for project in ${arrayToShell projectFile}; do
            dotnetBuild "$project"
        done

        runHook postBuild
      '';
    });
in
  package
